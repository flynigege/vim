"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"tong
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" turn off nice effect on status bar title

"pathgen
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on
syntax on


"easymotion
let g:EasyMotion_leader_key = '<Leader>'
let g:EasyMotion_do_shade = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Get out of VI's compatible mode..

set nocompatible

function! MySys()
	if has("win32")
		return "win32"
	elseif has("unix")
		return "unix"
	else
		return "mac"
	endif
endfunction
"Set shell to be bash
if MySys() == "unix" || MySys() == "mac"
	set shell=bash
else
	"I have to run win32 python without cygwin
	"set shell=E:cygwininsh
endif

"Sets how many lines of history VIM har to remember
set history=400

"Enable filetype plugin
"filetype on
if has("eval") && v:version>=600
	filetype plugin on
	filetype indent on
endif

"Set to auto read when a file is changed from the outside
if exists("&autoread")
	set autoread
endif

"Have the mouse enabled all the time:
if exists("&mouse")
	set mouse=a
endif

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"Fast saving
"nmap <leader>x :xa!<cr>
"nmap <leader>w :w!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Font
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Enable syntax hl
syntax on

"高亮字符，让其不受100列限制
:highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
:match OverLength '\%200v.*'

"internationalization
"I only work in Win2k Chinese version
if has("multi_byte")
	"set bomb
	set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1
	" CJK environment detection and corresponding setting
	if v:lang =~ "^zh_CN"
		" Use cp936 to support GBK, euc-cn == gb2312
		set encoding=cp936
		set termencoding=cp936
		set fileencoding=cp936
	elseif v:lang =~ "^zh_TW"
		" cp950, big5 or euc-tw
		" Are they equal to each other?
		set encoding=big5
		set termencoding=big5
		set fileencoding=big5
	elseif v:lang =~ "^ko"
		" Copied from someone's dotfile, untested
		set encoding=euc-kr
		set termencoding=euc-kr
		set fileencoding=euc-kr
	elseif v:lang =~ "^ja_JP"
		" Copied from someone's dotfile, untested
		set encoding=euc-jp
		set termencoding=euc-jp
		set fileencoding=euc-jp
	endif
	" Detect UTF-8 locale, and replace CJK setting if needed
	if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
		set encoding=utf-8
		set termencoding=utf-8
		set fileencoding=utf-8
	endif
endif

"if you use vim in tty,
"'uxterm -cjk' or putty with option 'Treat CJK ambiguous characters as wide' on
if exists("&ambiwidth")
	set ambiwidth=double
endif

if has("gui_running")
	set guioptions-=m
	set guioptions-=T
	set guioptions-=l
	set guioptions-=L
	set guioptions-=r
	set guioptions-=R
    set guioptions-=e
    set guioptions-=b

    "set maximized
    "set lines=999 columns=999
	if MySys()=="win32"
		"start gvim maximized
		if has("autocmd")
			au GUIEnter * simalt ~x
		endif
	endif
	"let psc_style='cool'
	if v:version > 601
		"colorscheme ps_color
		"colorscheme default
		"colorscheme elflord
		colorscheme seoul256
        "colorscheme molokai
        "colorscheme desertEx
		set guifont=Monacoforpowerline\ 12
		"set guifont=DejaVuSansMono\ 13

	endif
else
	if v:version > 601
		"set background=dark
		"colorscheme default
		"colorscheme molokai
		"colorscheme seoul256-light
		colorscheme seoul256
		"colorscheme desert
		"set guifont=DejaVuSansMono\ 13
		set guifont=Monacoforpowerline\ 12
	endif
endif

"Some nice mapping to switch syntax (useful if one mixes different languages in one file)
"map <leader>1 :set syntax=cheetah<cr>
"map <leader>2 :set syntax=xhtml<cr>
"map <leader>3 :set syntax=python<cr>
"map <leader>4 :set ft=javascript<cr>
"map <leader>$ :syntax sync fromstart<cr>

"Highlight current
"if has("gui_running")
" if exists("&cursorline")
" set cursorline
" endif
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fileformat
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Favorite filetype
set ffs=unix,dos,mac

"nmap <leader>fd :se ff=dos<cr>
"nmap <leader>fu :se ff=unix<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Set 7 lines to the curors - when moving vertical..
set so=7

"Turn on WiLd menu
set wildmenu

"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)


"The commandbar is 2 highset 

set cmdheight=1

"Show line number
set nu

"Do not redraw, when running macros.. lazyredraw
set lz

"Change buffer - without saving
set hid

"Set backspace
set backspace=eol,start,indent

"Bbackspace and cursor keys wrap to
set whichwrap+=<,>,h,l

"Ignore case when searching
set ignorecase
set incsearch

"Set magic on
set magic

"No sound on errors.
"set noerrorbell
set novisualbell
set t_vb=

"show matching bracet
set showmatch


"set show cmd
set showcmd

"How many tenths of a second to blink
set mat=8

"Highlight search thing
set hlsearch

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
"Format the statusline
" Nice statusbar
set laststatus=2
set t_Co=256
"	set statusline=
"	set statusline+=%2*%-3.3n%0*/ " buffer number
"	set statusline+=%f/ " file name
"	set statusline+=%h%1*%m%r%w%0* " flag
"	set statusline+=[
"	if v:version >= 600
"		set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype
"		set statusline+=%{&fileencoding}, " encoding
"	endif
"	set statusline+=%{&fileformat}] " file format
"	if filereadable(expand("usr/share/vim//vim73/plugin/vimbuddy.vim"))
"		set statusline+= / %{VimBuddy()} " vim buddy
"	endif
"	set statusline+=%= " right align
"	set statusline+=[L=%l,C=%v]\ [P=%p%%]
"	set statusline+=\ [%b][0x%B]\               " ASCII and byte code under cursor
"	set statusline+=\ [%{strftime(\"%d/%m/%y\ -\ %H:%M\")}]

" special statusbar for special window
" Nice window title
if has('title') && (has('gui_running') || &title)
	set titlestring=
	set titlestring+=%f/ " file name
	set titlestring+=%h%m%r%w " flag
	"set titlestring+=/ -/%{v:progname} " program name
endif



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around and tab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Map space to / and c-space to ?
"map <space> /

"Smart way to move btw. window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

if v:version>=700
	set switchbuf=usetab
endif

"always display the tab line
if exists("&showtabline")
	set stal=2
endif

"Moving fast to front, back and 2 sides ;)
"imap <m-$> <esc>$a
"imap <m-0> <esc>0i
"imap <D-$> <esc>$a
"imap <D-0> <esc>0i


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Autocommand
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Switch to current dir
map <leader>cd :cd %:p:h<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vnoremap $1 <esc>`>a)<esc>`<i(<esc>
"")
"vnoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnoremap $q <esc>`>a'<esc>`<i'<esc>
"vnoremap $w <esc>`>a"<esc>`<i"<esc>

"Map auto complete of (, ", ', [
"http://www.vim.org/tips/tip.php?tip_id=153

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrev
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Comment for C like language
"if has("autocmd")
"	au BufNewFile,BufRead *.js,*.htc,*.c,*.tmpl,*.css ino $c /**<cr> **/<esc>O
"endif

"My information
"ia xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
"iab xname Amir Salihefendic

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings etc.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

"Move a line of text using control
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-line config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"func! Cwd()
"	let cwd = getcwd()
"	return "e " . cwd
"endfunc

"func! DeleteTillSlash()
"	let g:cmd = getcmdline()
"	if MySys() == "unix" || MySys() == "mac"
"		let g:cmd_edited = substitute(g:cmd, "(.*[/]).*", "", "")
"	else
"		let g:cmd_edited = substitute(g:cmd, "(.*[/]).*", "", "")
"	endif
"	if g:cmd == g:cmd_edited
"		if MySys() == "unix" || MySys() == "mac"
"			let g:cmd_edited = substitute(g:cmd, "(.*[/]).*/", "", "")
"		else
"			let g:cmd_edited = substitute(g:cmd, "(.*[/]).*[/]", "", "")
"		endif
"	endif
"	return g:cmd_edited
"endfunc

"func! CurrentFileDir(cmd)
"	return a:cmd . " " . expand("%:p:h") . "/"
"endfunc

"cno $q <C->eDeleteTillSlash()<cr>
"cno $c e <C->eCurrentFileDir("e")<cr>
"cno $tc <C->eCurrentFileDir("tabnew")<cr>
"cno $th tabnew ~/
"cno $td tabnew ~/Desktop/

"Bash like
"cno <C-A> <Home>
"cno <C-E> <End>
"cno <C-K> <C-U>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Buffer realted
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Fast open a buffer by search for a name
"map <c-q> :sb

"Open a dummy buffer for paste
"map <leader>q :e ~/buffer<cr>

"Restore cursor to file position in previous editing session
set viminfo='10,"100,:20,%,n~/.viminfo

" Buffer - reverse everything ... :)
"map <F9> ggVGg?

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files and backup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Turn backup off
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Enable folding, I find it very useful
if exists("&foldenable")
	set fen
endif

if exists("&foldlevel")
	set fdl=0
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text option
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python script
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set backspace=2
set smarttab
set lbr
"set listchars=precedes:«,extends:»,tab:▸·,trail:∙,eol:¶
"set tw=500

""""""""""""""""""""""""""""""
" => Indent
""""""""""""""""""""""""""""""
"Auto indent
set autoindent

"Smart indet
set smartindent

"C-style indenting
if has("cindent")
	set cindent
endif

"Wrap line
set wrap


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"map <leader>sn ]
"map <leader>sp [
"map <leader>sa zg
"map <leader>s? z=



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" => Yank Ring
""""""""""""""""""""""""""""""
map <leader>y :YRShow<cr>

""""""""""""""""""""""""""""""
" => File explorer
""""""""""""""""""""""""""""""
"Split vertically
"let g:explVertical=1
"
""Window size
"let g:explWinSize=35
"
"let g:explSplitLeft=1
"let g:explSplitBelow=1
"
""Hide some file
"let g:explHideFiles='^.,.*.class$,.*.swp$,.*.pyc$,.*.swo$,.DS_Store$'
"
""Hide the help thing..
"let g:explDetailedHelp=0

""""""""""""""""""""""""""""""
" => Minibuffer
""""""""""""""""""""""""""""""
" let g:miniBufExplModSelTarget = 1
" let g:miniBufExplorerMoreThanOne = 0
" let g:miniBufExplUseSingleClick = 1
" let g:miniBufExplMapWindowNavVim = 1
"" let g:miniBufExplVSplit = 25
" let g:miniBufExplSplitBelow=0
" let g:miniBufExplMapWindowNavArrows = 1 
" let g:miniBufExplMapCTabSwitchBufs = 1 


"WindowZ
"map <c-w><c-t> :WMToggle<cr>
"let g:bufExplorerSortBy = "name"

""""""""""""""""""""""""""""""
" => LaTeX Suite thing
""""""""""""""""""""""""""""""
"set grepprg=grep -r -s -n
"let g:Tex_DefaultTargetFormat="pdf"
"let g:Tex_ViewRule_pdf='xpdf'

"if has("autocmd")
"	"Binding
"	au BufRead *.tex map <silent><leader><space> :w!<cr> :silent! call Tex_RunLaTeX()<cr>
"
"	"Auto complete some things ;)
"	au BufRead *.tex ino <buffer> $i indent
"	au BufRead *.tex ino <buffer> $* cdot
"	au BufRead *.tex ino <buffer> $i item
"	au BufRead *.tex ino <buffer> $m [<cr>]<esc>O
"endif




"procss the readonly file and unsave file popup confrim
set confirm
""""""""""""""""""""""""""""""
" => Tag list (ctags) - not used
""""""""""""""""""""""""""""""
"let Tlist_Ctags_Cmd = "/usr/bin/ctags"
"let Tlist_Compart_Format=1
"let Tlist_Sort_Type = "name"
"let Tlist_Show_Menu = 1
"let Tlist_Exist_OnlyWindow = 1
"let Tlist_Use_Right_Window=1
"let Tlist_File_Fold_Auto_Close = 0
"
"let Tlist_Enable_Fold_Column = 0
"let Tlist_Auto_Open=0
"let Tlist_Auto_Update=1
"let Tlist_Show_One_File=1
"


map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"map <leader>t :Tlist<cr>
"map <F4> :Tlist<cr>

"set tags=+tag
"use currentdir up dir recuit sub dir tag
set tags+=./tags,./../tags,./*/tag
set tags+=/home/mars/lib_indx/tags/python/tags
set tags+=/home/mars/lib_indx/tags/linux_src/tags
set tags+=/home/mars/src/qt484/tags


"tagbar setting
let g:tagbar_ctags_bin = '/usr/bin/ctags'
let g:tagbar_autofocus = 1
let g:tagbar_width = 35
map <F4> :TagbarToggle<cr> 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Filetype generic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Todo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"au BufNewFile,BufRead *.todo so ~/vim_local/syntax/amido.vim

""""""""""""""""""""""""""""""
" => VIM
""""""""""""""""""""""""""""""
if has("autocmd") && v:version>600
	au BufRead,BufNew *.vim map <buffer> <leader><space> :w!<cr>:source %<cr>
endif

""""""""""""""""""""""""""""""
" => HTML related
""""""""""""""""""""""""""""""
" HTML entities - used by xml edit plugin
"let xml_use_xhtml = 1
""let xml_no_auto_nesting = 1
"
""To HTML
"let html_use_css = 0
"let html_number_lines = 0
"let use_xhtml = 1

""""""""""""""""""""""""""""""
" => Ruby & PHP section
""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
""Run the current buffer in python - ie. on leader+space
"au BufNewFile,BufRead *.py so ~/vim_local/syntax/python.vim
"au BufNewFile,BufRead *.py map <buffer> <leader><space> :w!<cr>:!python %<cr>
"au BufNewFile,BufRead *.py so ~/vim_local/plugin/python_fold.vim

""Set some bindings up for 'compile' of python
"au BufNewFile,BufRead *.py set makeprg=python -c "import py_compile,sys; sys.stderr=sys.stdout; py_compile.compile(r'%')"
"au BufNewFile,BufRead *.py set efm=%C %.%#,%A File "%f", line %l%.%#,%Z%[%^ ]%@=%m
"au BufNewFile,BufRead *.py nmap <buffer> <F8> :w!<cr>:make<cr>

""Python iMap
"au BufNewFile,BufRead *.py set cindent
"au BufNewFile,BufRead *.py ino <buffer> $r return
"au BufNewFile,BufRead *.py ino <buffer> $s self
"au BufNewFile,BufRead *.py ino <buffer> $c ##<cr>#<space><cr>#<esc>kla
"au BufNewFile,BufRead *.py ino <buffer> $i import
"au BufNewFile,BufRead *.py ino <buffer> $p print
"au BufNewFile,BufRead *.py ino <buffer> $d """<cr>"""<esc>O

""Run in the Python interpreter
"function! Python_Eval_VSplit() range
" let src = tempname()
" let dst = tempname()
" execute ": " . a:firstline . "," . a:lastline . "w " . src
" execute ":!python " . src . " > " . dst
" execute ":pedit! " . dst
"endfunction
"au BufNewFile,BufRead *.py vmap <F7> :call Python_Eval_VSplit()<cr>


""""""""""""""""""""""""""""""
" => Cheetah section
"""""""""""""""""""""""""""""""
"if has("eval") && has("autocmd")
	"vim 5.8.9 on mingw donot know what is <SID>, so I avoid to use function
	"c/cpp
	"fun! Abbrev_cpp()
	"	ia <buffer> cci const_iterator
	"	ia <buffer> ccl cla
	"	ia <buffer> cco const
	"	ia <buffer> cdb bug
	"	ia <buffer> cde throw
	"	ia <buffer> cdf /** file<CR><CR>/<Up>
	"	ia <buffer> cdg ingroup
	"	ia <buffer> cdn /** Namespace <namespace<CR><CR>/<Up>
	"	ia <buffer> cdp param
	"	ia <buffer> cdt test
	"	ia <buffer> cdx /**<CR><CR>/<Up>
	"	ia <buffer> cit iterator
	"	ia <buffer> cns Namespace ianamespace
	"	ia <buffer> cpr protected
	"	ia <buffer> cpu public
	"	ia <buffer> cpv private
	"	ia <buffer> csl std::list
	"	ia <buffer> csm std::map
	"	ia <buffer> css std::string
	"	ia <buffer> csv std::vector
	"	ia <buffer> cty typedef
	"	ia <buffer> cun using Namespace ianamespace
	"	ia <buffer> cvi virtual
	"	ia <buffer> #i #include
	"	ia <buffer> #d #define
	"endfunction

	"fun! Abbrev_java()
	"	ia <buffer> #i import
	"	ia <buffer> #p System.out.println
	"	ia <buffer> #m public static void main(String[] args)
	"endfunction

	"fun! Abbrev_python()
	"	ia <buffer> #i import
	"	ia <buffer> #p print
	"	ia <buffer> #m if __name__=="__main__":
	"endfunction

	"fun! Abbrev_aspvbs()
	"	ia <buffer> #r Response.Write
	"	ia <buffer> #q Request.QueryString
	"	ia <buffer> #f Request.Form
	"endfunction

	"fun! Abbrev_js()
	"	ia <buffer> #a if(!0){throw Error(callStackInfo());}
	"endfunction

	"augroup abbreviation
	"	au!
	"	au FileType javascript :call Abbrev_js()
	"	au FileType cpp,c :call Abbrev_cpp()
	"	au FileType java :call Abbrev_java()
	"	au FileType python :call Abbrev_python()
	"	au FileType aspvbs :call Abbrev_aspvbs()
	"augroup END
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remove the Windows ^M
noremap <leader>m :%s//r//g<CR>

"Paste toggle - when pasting something in, don't indent.
"set pastetoggle=<F3>

"Super paste
ino <C-v> <esc>:set paste<cr>mui<C-R>+<esc>mv'uV'v=:set nopaste<cr>

"clipboard with xclip
"if MySys() == "unix"
"	vmap <F6> :!xclip -sel c<CR>
"	map <F7> :-1r!xclip -o -seln c<CR>'z
"endif

"cscope 
if has("cscope")
	set cscopequickfix=s-,c-,d-,i-,t-,e-
	set csto=0
	set cst
	set csverb
endif


function Do_CsTag()
	if(executable('cscope') && has("cscope") )
		if(g:iswindows!=1)
			silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' > cscope.files"
		else
			silent! execute "!dir /s/b *.c,*.cpp,*.h > cscope.files"
			"silent! execute "del cscope.files"
			"silent! execute "for /r . %%a in (*.c,*.cpp,*.h,*.hpp) do echo %%a >> cscope.files"
		endif
		silent! execute "!cscope -Rb"
		if filereadable("cscope.out")
			execute "cs add cscope.out"
		endif
	endif
endf
map <C-F10> :call Do_CsTag()<CR>
"selction
set selection=exclusive
set selectmode=mouse,key
"do not show me
set shortmess=atI

set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$
"format
set formatoptions=tcrqn

set completeopt=longest,menu
set complete=.,i

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"pwerline
let g:Powerline_symbols='fancy'
let g:Powerline_cache_enabled = 1
"let g:Powerline_dividers_override = ['>>', '>', '<<', '<']
"let g:Powerline_symbols_override = {
"    \   'BRANCH': [0x2b60]
"    \ , 'RO'    : [0x2b64]
"    \ , 'FT'    : [0x2b62, 0x2b63]
"    \ , 'LINE'  : [0x2b61]
"\}
"
"
autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType java set omnifunc=javacomplete#Complete

"
runtime macros/matchit.vim
let g:acp_behaviorSnipmateLength=1
"quick fix

nmap <F3> :NERDTreeToggle<cr>
nmap <F5> :cn<cr>
nmap <F6> :cp<cr>
nmap <F8> :EasyBuffer<cr>
nmap <s-T> :CommandT<cr>

nmap <F9> :Pyrun<cr> 

nnoremap <F7> :UndotreeToggle<cr>

silent! cs add ~/lib_indx/cscope/linux_src/cscope.out

"add python 3.3
silent! cs add ~/lib_indx/cscope/python/3.3/cscope.out


"add qt484
silent! cs add /home/mars/src/qt484/cscope.out
if has("persistent_undo")
    set undodir='/home/mars/undo_tree/'
    set undofile
endif

"rope python
"rope python default values
" Load rope plugin
let pymode_rope_vim_completion=1

let g:pymode_rope = 1

" Auto create and open ropeproject
let g:pymode_rope_auto_project = 1

" Enable autoimport
let g:pymode_rope_enable_autoimport = 1

" Auto generate global cache
let g:pymode_rope_autoimport_generate = 1

let g:pymode_rope_autoimport_underlineds = 0

let g:pymode_rope_codeassist_maxfixes = 10

let g:pymode_rope_sorted_completions = 1

let g:pymode_rope_extended_complete = 1

let g:pymode_rope_autoimport_modules = ["os","shutil","datetime"]

let g:pymode_rope_confirm_saving = 1

let g:pymode_rope_global_prefix = "<C-x>p"

let g:pymode_rope_local_prefix = "<C-c>r"

let g:pymode_rope_vim_completion = 1

let g:pymode_rope_guess_project = 1

let g:pymode_rope_goto_def_newwin = ""

let g:pymode_rope_always_show_complete_menu = 0


"clang_config
let g:clang_auto_select=1
"let g:clang_complete_copen=1
let g:clang_hl_errors=1
let g:clang_periodic_quickfix=0
let g:clang_snippets=1

let g:clang_snippets_engine="clang_complete"
"let g:clang_snippets_engine="snipmate"
"let g:clang_trailing_placeholder=1

let g:clang_conceal_snippets=1
"set concealcursor=in
"set conceallevel=2


let g:clang_exec="clang"
let g:clang_user_options=""
"let g:clang_user_options='2>/dev/null || exit 0"'
let g:clang_auto_user_options="path, .clang_complete, clang"
"let g:clang_use_library=0
"let g:clang_library_path="/usr/lib/"
"let g:clang_sort_algo="priority"
let g:clang_complete_macros=1
let g:clang_complete_patterns=1

let g:clang_hl_errors=1
let g:clang_complete_copen=1

"map for c code check

nnoremap <Leader>q :call g:ClangUpdateQuickFix()<CR>
"nnoremap <Leader>r :call ClangGetReferences()<CR>
"nnoremap <Leader>d :call ClangGetDeclarations()<CR>
"nnoremap <Leader>s :call ClangGetSubclasses()<CR>

"nmap <C-F11>:!make CC='~/.vim/bundle/clang_complete/bin/cc_args.py gcc' CXX='~/.vim/bundle/clang_complete/bin/cc_args.py g++' -B <cr>
"let g:SuperTabMappingForward="<tab>"

set colorcolumn=80

let g:splice_initial_mode = "compare"
let g:splice_initial_layout_grid = 2
let g:splice_initial_layout_compare = 1



" // The switch of the Source Explorer 
nmap <F10> :SrcExplToggle<CR> 

" // Set the height of Source Explorer window 
let g:SrcExpl_winHeight = 8 

" // Set 100 ms for refreshing the Source Explorer 
let g:SrcExpl_refreshTime = 100 

" // Set "Enter" key to jump into the exact definition context 
let g:SrcExpl_jumpKey = "<ENTER>" 

" // Set "Space" key for back from the definition context 
let g:SrcExpl_gobackKey = "<SPACE>" 

" // In order to Avoid conflicts, the Source Explorer should know what plugins 
" // are using buffers. And you need add their bufname into the list below 
" // according to the command ":buffers!" 
let g:SrcExpl_pluginList = [ 
        \ "__Tag_List__", 
        \ "_NERD_tree_", 
        \ "Source_Explorer" 
    \ ] 

" // Enable/Disable the local definition searching, and note that this is not 
" // guaranteed to work, the Source Explorer doesn't check the syntax for now. 
" // It only searches for a match with the keyword according to command 'gd' 
let g:SrcExpl_searchLocalDef = 1 

" // Do not let the Source Explorer update the tags file when opening 
let g:SrcExpl_isUpdateTags = 0 

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to 
" // create/update the tags file 
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 

" // Set "<F12>" key for updating the tags file artificially 
let g:SrcExpl_updateTagsKey = "<C-F11>" 

" // Set "<F3>" key for displaying the previous definition in the jump list 
let g:SrcExpl_prevDefKey = "<C-3>" 

" // Set "<F4>" key for displaying the next definition in the jump list 
let g:SrcExpl_nextDefKey = "<C-4>" 

"fuzzfinder
nmap <c-s-f> :FufBufferTag<CR>

"qt help plugin
let g:qthelp_tags='/usr/local/Trolltech/Qt-4.8.4/doc/tags'
let g:qthelp_browser='/opt/google/chrome/google-chrome'

nmap <c-s-g> :QHelpOnThis<CR>
"just for the target
nmap <C-F7> :! ./CMDSim<CR>

"vim easy align
vnoremap <silent> <Enter> :EasyAlign<cr>
"let g:easy_align_ignore_comment = 0
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '/': { 'pattern': '//\+\|/\*\|\*/' },
\ '#': { 'pattern': '#\+' },
\ ']': {
\     'pattern':       '[\[\]]',
\     'margin_left':   '',
\     'margin_right':  '',
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'margin_left':   '',
\     'margin_right':  '',
\     'stick_to_left': 0
\   }
\ }

"""vim easytags
""let g:easytags_cmd = '/usr/local/bin/ctags'
""let g:easytags_file = '~/lib_indx/easytags/tags'
""
""set tags+=./tags
"""let g:easytags_dynamic_files = 1
""let g:easytags_dynamic_files = 2
""let g:easytags_by_filetype = 1
""let g:easytags_events = ['BufWritePost']
""let g:easytags_include_members = 1
